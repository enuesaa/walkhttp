// Code generated by MockGen. DO NOT EDIT.
// Source: log.go
//
// Generated by this command:
//
//	mockgen -source=log.go -destination log_mock.go -package repository
//

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockLogRepositoryInterface is a mock of LogRepositoryInterface interface.
type MockLogRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockLogRepositoryInterfaceMockRecorder
	isgomock struct{}
}

// MockLogRepositoryInterfaceMockRecorder is the mock recorder for MockLogRepositoryInterface.
type MockLogRepositoryInterfaceMockRecorder struct {
	mock *MockLogRepositoryInterface
}

// NewMockLogRepositoryInterface creates a new mock instance.
func NewMockLogRepositoryInterface(ctrl *gomock.Controller) *MockLogRepositoryInterface {
	mock := &MockLogRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockLogRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogRepositoryInterface) EXPECT() *MockLogRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Fatalf mocks base method.
func (m *MockLogRepositoryInterface) Fatalf(format string, a ...any) {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	m.ctrl.Call(m, "Fatalf", varargs...)
}

// Fatalf indicates an expected call of Fatalf.
func (mr *MockLogRepositoryInterfaceMockRecorder) Fatalf(format any, a ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, a...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatalf", reflect.TypeOf((*MockLogRepositoryInterface)(nil).Fatalf), varargs...)
}

// GetAll mocks base method.
func (m *MockLogRepositoryInterface) GetAll() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAll indicates an expected call of GetAll.
func (mr *MockLogRepositoryInterfaceMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockLogRepositoryInterface)(nil).GetAll))
}

// Printf mocks base method.
func (m *MockLogRepositoryInterface) Printf(format string, a ...any) {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	m.ctrl.Call(m, "Printf", varargs...)
}

// Printf indicates an expected call of Printf.
func (mr *MockLogRepositoryInterfaceMockRecorder) Printf(format any, a ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, a...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Printf", reflect.TypeOf((*MockLogRepositoryInterface)(nil).Printf), varargs...)
}
